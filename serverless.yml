service: notes-app-2-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  notesTableName: ${self:custom.stage}-notes
  beginningsTableName: ${self:custom.stage}-beginnings
  mirrorsTableName: ${self:custom.stage}-mirrors
  darknessTableName: ${self:custom.stage}-darkness
  fillerTableName: ${self:custom.stage}-filller

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-west-2

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    notesTableName: ${self:custom.notesTableName}
    beginningsTableName: ${self:custom.beginningsTableName}
    mirrorsTableName: ${self:custom.mirrorsTableName}
    darknessTableName: ${self:custom.darknessTableName}
    fillerTableName: ${self:custom.fillerTableName}
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ NotesTable, Arn ]
        - "Fn::GetAtt": [ BeginningsTable, Arn ]
        - "Fn::GetAtt": [ MirrorsTable, Arn ]
        - "Fn::GetAtt": [ DarknessTable, Arn ]

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  # Create functions for each table below this line:
  create-filler:
    handler: create-filler.main
    events:
      - http:
          path: fillers
          method: post
          cors: true
          authorizer: aws_iam

  create-darkness:
    handler: create-darkness.main
    events:
      - http:
          path: darknesss
          method: post
          cors: true
          authorizer: aws_iam

  create-mirror:
    handler: create-mirror.main
    events:
      - http:
          path: mirrors
          method: post
          cors: true
          authorizer: aws_iam

  create-beginning:
    handler: create-beginning.main
    events:
      - http:
          path: beginnings
          method: post
          cors: true
          authorizer: aws_iam

  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam

  # Get functions for each table below this line:
  get-filler:
    handler: get-filler.main
    events:
      - http:
          path: fillers/{id}
          method: get
          cors: true
          authorizer: aws_iam

  get-darkness:
    handler: get-darkness.main
    events:
      - http:
          path: darknesss/{id}
          method: get
          cors: true
          authorizer: aws_iam

  get-mirror:
    handler: get-mirror.main
    events:
      - http:
          path: mirrors/{id}
          method: get
          cors: true
          authorizer: aws_iam

  get-beginning:
    handler: get-beginning.main
    events:
      - http:
          path: beginnings/{id}
          method: get
          cors: true
          authorizer: aws_iam
  
  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  
  # List functions for each table below this line:
  list-filler:
    handler: list-filler.main
    events:
      - http:
          path: fillers
          method: get
          cors: true
          authorizer: aws_iam

  list-darkness:
    handler: list-darkness.main
    events:
      - http:
          path: darknesss
          method: get
          cors: true
          authorizer: aws_iam

  list-mirror:
    handler: list-mirror.main
    events:
      - http:
          path: mirrors
          method: get
          cors: true
          authorizer: aws_iam

  list-beginning:
    handler: list-beginning.main
    events:
      - http:
          path: beginnings
          method: get
          cors: true
          authorizer: aws_iam
  
  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam

  # Update functions for each table below this line:
  update-filler:
    handler: update-filler.main
    events:
      - http:
          path: fillers/{id}
          method: put
          cors: true
          authorizer: aws_iam

  update-darkness:
    handler: update-darkness.main
    events:
      - http:
          path: darknesss/{id}
          method: put
          cors: true
          authorizer: aws_iam

  update-mirror:
    handler: update-mirror.main
    events:
      - http:
          path: mirrors/{id}
          method: put
          cors: true
          authorizer: aws_iam

  update-beginning:
    handler: update-beginning.main
    events:
      - http:
          path: beginnings/{id}
          method: put
          cors: true
          authorizer: aws_iam

  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam

  # Delete functions for each table below this line:
  delete-filler:
    handler: delete-filler.main
    events:
      - http:
          path: fillers/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  delete-darkness:
    handler: delete-darkness.main
    events:
      - http:
          path: darknesss/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  delete-mirror:
    handler: delete-mirror.main
    events:
      - http:
          path: mirrors/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  delete-beginning:
    handler: delete-beginning.main
    events:
      - http:
          path: beginnings/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  billing:
    # Defines an HTTP API endpoint that calls the main function in billing.js
    # - path: url path is /billing
    # - method: POST request
    handler: billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/dynamodbTable-beginning.yml)}
  - ${file(resources/dynamodbTable-mirror.yml)}
  - ${file(resources/dynamodbTable-darkness.yml)}
  - ${file(resources/dynamodbTable-filler.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}